{"version":3,"sources":["components/Jumbotron/index.js","components/Search-Bar/index.js","utils/API/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["JumbotronPage","fluid","className","SearchPage","md","type","placeholder","aria-label","gradient","rounded","size","axios","get","TablePage","state","data","columns","label","field","sort","rows","API","then","res","console","log","results","i","length","person","picture","thumbnail","name","first","last","phone","email","Date","dob","date","toLocaleDateString","push","setState","responsive","this","Component","App","Jumbotron","Table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qPAceA,EAXO,WACpB,OACE,kBAAC,IAAD,CAAcC,OAAK,GACjB,kBAAC,IAAD,KACE,wBAAIC,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,4FCQOC,EAbI,WACf,OACI,kBAAC,IAAD,CAAQC,GAAG,MACP,kBAAC,IAAD,CAAeF,UAAU,wBACrB,2BAAOA,UAAU,uBAAuBG,KAAK,OAAOC,YAAY,SAASC,aAAW,WACpF,kBAAC,IAAD,CAAQC,SAAS,OAAOC,SAAO,EAACC,KAAK,KAAKL,KAAK,SAASH,UAAU,WAAlE,a,yDCLD,EACA,WACX,OAAOS,IAAMC,IAAI,kDCsENC,E,4MArEbC,MAAQ,CACNC,KAAM,CACJC,QAAS,CACP,CACEC,MAAO,QACPC,MAAO,WACPC,KAAM,OAER,CACEF,MAAO,OACPC,MAAO,WACPC,KAAM,OAER,CACEF,MAAO,QACPC,MAAO,WACPC,KAAM,OAER,CACEF,MAAO,QACPC,MAAO,WACPC,KAAM,OAER,CACEF,MAAO,QACPC,MAAO,WACPC,KAAM,QAGVC,KAAM,K,kEAIW,IAAD,OAClBC,IAAkBC,MAAK,SAACC,GACtBC,QAAQC,IAAIF,EAAIR,KAAKW,SAErB,IADA,IAAMN,EAAO,GACJO,EAAI,EAAGA,EAAIJ,EAAIR,KAAKW,QAAQE,OAAQD,IAAK,CAChD,IAMME,EAAS,CACb,MAPYN,EAAIR,KAAKW,QAAQC,GAAGG,QAAQC,UAQxC,KAPWR,EAAIR,KAAKW,QAAQC,GAAGK,KAAKC,MAAQ,IAAMV,EAAIR,KAAKW,QAAQC,GAAGK,KAAKE,KAQ3E,MAPYX,EAAIR,KAAKW,QAAQC,GAAGQ,MAQhC,MAPYZ,EAAIR,KAAKW,QAAQC,GAAGS,MAQhC,QAPU,IAAIC,KAAKd,EAAIR,KAAKW,QAAQC,GAAGW,IAAIC,MAAMC,mBAAmB,UAStEhB,QAAQC,IAAII,GACZT,EAAKqB,KAAKZ,GAEZL,QAAQC,IAAIL,GACZ,EAAKsB,SAAS,CAAE3B,KAAK,2BAAM,EAAKD,MAAMC,MAAlB,IAAwBK,KAAMA,W,+BAKpD,OACE,kBAAC,IAAD,CAAUuB,YAAU,GAClB,kBAAC,IAAD,CAAc3B,QAAS4B,KAAK9B,MAAMC,KAAKC,UACvC,kBAAC,IAAD,CAAcI,KAAMwB,KAAK9B,MAAMC,KAAKK,Y,GAhEpByB,aCYTC,MAVf,WACE,OACE,yBAAK5C,UAAU,OACf,kBAAC6C,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,QCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.e55f9839.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBJumbotron, MDBContainer } from \"mdbreact\";\r\n\r\nconst JumbotronPage = () => {\r\n  return (\r\n    <MDBJumbotron fluid>\r\n      <MDBContainer>\r\n        <h2 className=\"display-4\">Employee Directory</h2>\r\n        <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\r\n      </MDBContainer>\r\n    </MDBJumbotron>\r\n  )\r\n}\r\n\r\nexport default JumbotronPage;","import React from \"react\";\r\nimport { MDBCol, MDBFormInline, MDBBtn } from \"mdbreact\";\r\n\r\nconst SearchPage = () => {\r\n    return (\r\n        <MDBCol md=\"12\">\r\n            <MDBFormInline className=\"md-form mr-auto mb-4\">\r\n                <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <MDBBtn gradient=\"aqua\" rounded size=\"sm\" type=\"submit\" className=\"mr-auto\">\r\n                    Search\r\n                </MDBBtn>\r\n            </MDBFormInline>\r\n        </MDBCol>\r\n    );\r\n}\r\n\r\nexport default SearchPage;","import axios from \"axios\"\r\n\r\n\r\nexport default {\r\n  randomUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n  }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\r\nimport API from '../../utils/API'\r\n\r\n//const TablePage = (props) => {\r\nclass TablePage extends Component {\r\n  state = {\r\n    data: {\r\n      columns: [\r\n        {\r\n          label: 'Image',\r\n          field: 'heading0',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Name',\r\n          field: 'heading1',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Phone',\r\n          field: 'heading2',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'Email',\r\n          field: 'heading3',\r\n          sort: 'asc'\r\n        },\r\n        {\r\n          label: 'D.O.B',\r\n          field: 'heading4',\r\n          sort: 'asc'\r\n        },\r\n      ],\r\n      rows: [],\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.randomUsers().then((res) => {\r\n      console.log(res.data.results);\r\n      const rows = [];\r\n      for (let i = 0; i < res.data.results.length; i++) {\r\n        const image = res.data.results[i].picture.thumbnail;\r\n        const name = res.data.results[i].name.first + \" \" + res.data.results[i].name.last;\r\n        const phone = res.data.results[i].phone;\r\n        const email = res.data.results[i].email;\r\n        const dob = new Date(res.data.results[i].dob.date).toLocaleDateString('en-US');\r\n\r\n        const person = {\r\n          'Image': image,\r\n          'Name': name,\r\n          'Phone': phone,\r\n          'Email': email,\r\n          'D.O.B': dob,\r\n        };\r\n        console.log(person);\r\n        rows.push(person);\r\n      };\r\n      console.log(rows);\r\n      this.setState({ data: { ...this.state.data, rows: rows } });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MDBTable responsive>\r\n        <MDBTableHead columns={this.state.data.columns} />\r\n        <MDBTableBody rows={this.state.data.rows} />\r\n      </MDBTable >\r\n    );\r\n  }\r\n};\r\n\r\nexport default TablePage;","import React from 'react';\r\nimport './App.css';\r\nimport JumbotronPage from './components/Jumbotron';\r\nimport SearchPage from './components/Search-Bar/index';\r\nimport TablePage from './components/Table';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <JumbotronPage />\r\n    <SearchPage />\r\n    <TablePage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}